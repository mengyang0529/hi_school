{"rule":"COMMA_PARENTHESIS_WHITESPACE","sentence":"^\\QJapan High School Map let map; const defaultLocation = [35.68944, 139.69167]; const defaultZoom = 9; let markers = []; let markersGroup = L.markerClusterGroup(); let heatLayer; let displayType = \"Point\"; let selectedRegion = \"全国\"; let zoomLevel = defaultZoom; // Default zoom level function initMap(schools, regionCenter) { console.log('Initializing map with', schools.length, 'schools'); if (!map) { map = L.map('map', {preferCanvas: true}).setView(regionCenter || defaultLocation, zoomLevel); L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', { maxZoom: 18 }).addTo(map); } else { map.setView(regionCenter || defaultLocation, zoomLevel); } clearMarkers(); markersGroup.clearLayers(); if (displayType === \"Point\") { addMarkers(schools); } else if (displayType === \"Heatmap\") { addHeatmap(schools); } } function clearMarkers() { markers.forEach(marker => map.removeLayer(marker)); markers = []; if (heatLayer) { map.removeLayer(heatLayer); } } function addMarkers(schools) { schools.forEach(school => { if (school.latitude && school.longitude && school.name && school.region) { const popupContent = ` <div> <h3>${school.name}</h3> <p>住所: ${school.address || ''}</p> <p>ホームページ: <a href=\"${school.url || '#'}\" target=\"_blank\">${school.url || ''}</a></p> </div>`; const marker = L.marker([school.latitude, school.longitude]).bindPopup(popupContent); markers.push(marker); } else { console.warn('Missing school data:', school); } }); markers.forEach(marker => marker.addTo(map)); if (document.getElementById('region-select').value === \"全国\") { markers.forEach(marker => markersGroup.addLayer(marker)); map.addLayer(markersGroup); clearMarkers(); } else{ markersGroup.clearLayers(); } } function addHeatmap(schools, zoomLevel) { var canvas = document.createElement('canvas'); var ctx = canvas.getContext('2d', { willReadFrequently: true }); const heatData = schools .filter(school => school.latitude && school.longitude && school.deviation) .map(school => [school.latitude, school.longitude, school.deviation]); if (heatData.length > 0) { heatLayer = L.heatLayer(heatData, { radius: Math.max(zoomLevel / 2, 10), blur: 10, minOpacity: 0.5, maxZoom: 18, gradient: { 0.0: 'blue', 0.2: 'cyan', 0.4: 'lime', 0.6: 'yellow', 0.8: 'orange', 1.0: 'red'} }).addTo(map); } else { console.warn('No valid heatmap data available'); } } function fetchSchools() { const url = `/schools/${selectedRegion ?\\E$"}
